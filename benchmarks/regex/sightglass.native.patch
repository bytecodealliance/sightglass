diff --git a/Cargo.toml b/Cargo.toml
index ee59a1c..dbeccb7 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -8,3 +8,6 @@ regex = "1.7.1"
 sightglass-api = "0.1"
 
 [workspace]
+
+[lib]
+crate-type = ["cdylib"]
\ No newline at end of file
diff --git a/build.rs b/build.rs
new file mode 100644
index 0000000..6d7d743
--- /dev/null
+++ b/build.rs
@@ -0,0 +1,3 @@
+fn main() {
+    println!("cargo:rustc-cdylib-link-arg=-L../../../engines/native/");
+}
diff --git a/src/main.rs b/src/lib.rs
similarity index 84%
rename from src/main.rs
rename to src/lib.rs
index a1ef2f8..0bf007d 100644
--- a/src/main.rs
+++ b/src/lib.rs
@@ -13,16 +13,27 @@ const URI_PATTERN: &str = r"[\w]+://[^/\s?#]+[^\s?#]+(?:\?[^\s#]*)?(?:#[^\s]*)?"
 const IP_PATTERN: &str =
     r"(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9])";
 
-fn main() {
+#[link(name = "engine")]
+extern "C" {
+    fn bench_start() -> ();
+    fn bench_end() -> ();
+}
+
+#[no_mangle]
+pub extern "C" fn native_entry() {
     let path = "default.input";
     eprintln!("[regex] matching {}", path);
     let data = std::fs::read_to_string(path).expect("unable to find `*.input` text file");
 
-    bench::start();
+    unsafe {
+        bench_start();
+    }
     let emails = count_matches(&data, EMAIL_PATTERN);
     let uris = count_matches(&data, URI_PATTERN);
     let ips = count_matches(&data, IP_PATTERN);
-    bench::end();
+    unsafe {
+        bench_end();
+    }
 
     eprintln!("[regex] found {} emails", emails);
     eprintln!("[regex] found {} URIs", uris);
